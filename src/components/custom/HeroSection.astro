---
const { title, data } = Astro.props;
---

<div
  class="zubuz-hero-section"
  style="background-image: url(assets/images/v1/hero-shape1.png)"
>
  <div class="container">
    <div class="zubuz-hero-content center position-relative">
      <h1 class="tw-text-[#242426]">
        {typeof title === 'string' ? title : (
          <>
            {title.prefix} 
            <span class="typewriter tw-text-primary" data-words={JSON.stringify(title.typewriterWords)} data-wait="3000">{title.typewriterWords[0]}</span> 
            {title.suffix}
          </>
        )}
      </h1>
      <p>
        {data?.desc}
      </p>
      <div class="zubuz-hero-btn-wrap center">
        <a class="zubuz-default-btn btn-primary" href={data?.mainBtnLink}>
          <span>{data?.mainBtnText}</span>
        </a>
        {
          data?.secondaryBtnLink && (
            <a
              class="video-init zubuz-hero-video"
              href={data?.secondaryBtnLink}
            >
              <img src="assets/images/v1/play-btn.png" alt="" />
              {data?.secondaryBtnText}
            </a>
          )
        }
      </div>
      <div class="zubuz-hero-shape">
        <img src="assets/images/v1/shape.png" alt="" />
      </div>
    </div>
    <div class="zubuz-hero-bottom">
      <div class="zubuz-hero-thumb wow fadeInUpX">
        <img src={data?.imgGrid[0]} alt="" />
      </div>
      <div class="zubuz-hero-card card1 wow zoomIn">
        <img src={data?.imgGrid[1]} alt="" />
      </div>
      <div class="zubuz-hero-card card2 wow zoomIn">
        <img src={data?.imgGrid[2]} alt="" />
      </div>
      <div class="zubuz-hero-card card3 wow zoomIn">
        <img src={data?.imgGrid[3]} alt="" />
      </div>
      <div class="zubuz-hero-card card4 wow zoomIn">
        <img src={data?.imgGrid[4]} alt="" />
      </div>
    </div>
  </div>
</div>

<style>

  /* Typewriter styles */
  .typewriter {
    display: inline-block;
    white-space: nowrap;
    min-width: 0; /* Será calculado via JavaScript */
    text-align: left;
  }

  .Typewriter__cursor {
    color: inherit !important;
  }
</style>

<script>
  // @ts-ignore
  import Typewriter from 'typewriter-effect/dist/core';

  function calculateMaxWidth(words: string[], element: HTMLElement): number {
    try {
      const measurer = document.createElement('span');
      measurer.style.position = 'absolute';
      measurer.style.visibility = 'hidden';
      measurer.style.whiteSpace = 'nowrap';
      measurer.style.pointerEvents = 'none';
      
      const computed = window.getComputedStyle(element);
      measurer.style.fontFamily = computed.fontFamily;
      measurer.style.fontSize = computed.fontSize;
      measurer.style.fontWeight = computed.fontWeight;
      measurer.style.letterSpacing = computed.letterSpacing;
      measurer.style.textTransform = computed.textTransform;
      measurer.style.lineHeight = computed.lineHeight;
      
      document.body.appendChild(measurer);

      let maxWidth = 0;
      words.forEach((word: string) => {
        measurer.textContent = word;
        const width = measurer.getBoundingClientRect().width;
        if (width > maxWidth) maxWidth = width;
      });
      
      document.body.removeChild(measurer);
      return maxWidth;
    } catch (e) {
      console.warn('Error calculating typewriter width:', e);
      return 0;
    }
  }

  function initTypewriter(): void {
    const typewriterElements = document.querySelectorAll('.typewriter');
    
    typewriterElements.forEach((element: Element) => {
      const htmlElement = element as HTMLElement;
      const words: string[] = JSON.parse(element.getAttribute('data-words') || '[]');
      const wait: number = parseInt(element.getAttribute('data-wait') || '2000');
      
      if (words.length > 0) {
        // Configura estilos básicos
        htmlElement.style.display = 'inline-block';
        htmlElement.style.whiteSpace = 'nowrap';
        htmlElement.style.textAlign = 'left';
        
        // Calcula e aplica largura máxima para evitar reflow/resize
        const maxWidth = calculateMaxWidth(words, htmlElement);
        if (maxWidth > 0) {
          htmlElement.style.minWidth = Math.ceil(maxWidth) + 'px';
          htmlElement.style.width = Math.ceil(maxWidth) + 'px';
        }

        // Limpa o conteúdo inicial do elemento
        htmlElement.innerHTML = '';
        
        const typewriter = new Typewriter(htmlElement, {
          loop: true,
          delay: 75,
          deleteSpeed: 50,
        });
        
        // Adiciona cada palavra da lista
        words.forEach((word: string, index: number) => {
          typewriter.typeString(word);
          
          // Se não for a última palavra, adiciona pausa e delete
          if (index < words.length - 1) {
            typewriter.pauseFor(wait).deleteAll();
          } else {
            // Na última palavra, faz uma pausa antes de recomeçar o loop
            typewriter.pauseFor(wait).deleteAll();
          }
        });
        
        typewriter.start();
      }
    });
  }

  function setupResponsiveReflowGuard(): void {
    let resizeTimeout: ReturnType<typeof setTimeout>;
    
    const handleResize = (): void => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        const typewriterElements = document.querySelectorAll('.typewriter');
        
        typewriterElements.forEach((element: Element) => {
          const htmlElement = element as HTMLElement;
          const words: string[] = JSON.parse(element.getAttribute('data-words') || '[]');
          
          if (words.length === 0) return;
          
          // Recalcula e aplica a largura máxima
          const maxWidth = calculateMaxWidth(words, htmlElement);
          if (maxWidth > 0) {
            htmlElement.style.minWidth = Math.ceil(maxWidth) + 'px';
            htmlElement.style.width = Math.ceil(maxWidth) + 'px';
          }
        });
      }, 150);
    };
    
    window.addEventListener('resize', handleResize, { passive: true });
  }

  // Inicializa quando o DOM estiver carregado
  document.addEventListener('DOMContentLoaded', () => {
    initTypewriter();
    setupResponsiveReflowGuard();
  });
</script>
